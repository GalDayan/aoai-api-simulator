"""
Run tests to ensure that the number of tokens generated by generate_lorem_text is within the expected range and that the average time is within the expected range.

The main challenges have been ensuring low max_token values generate the correct number of tokens, and that large max_token values do not take too long to generate.
"""

import time
from aoai_api_simulator.generator.openai import generate_lorem_text
from aoai_api_simulator.generator.openai_tokens import num_tokens_from_string
import pytest


def test_generation_min_max_time_10_tokens():
    """
    Ensure that the min/max tokens generated is correct for max_tokens=10 and that the average time is less than 5ms
    """

    run_test(
        max_tokens=10,
        expected_min=8,
        expected_max=10,
        max_duration=0.001,
    )


def test_generation_min_max_time_100_tokens():
    """
    Ensure that the min/max tokens generated is correct for max_tokens=100 and that the average time is less than 5ms
    """
    run_test(
        max_tokens=100,
        expected_min=95,
        expected_max=100,
        max_duration=0.001,
    )


@pytest.mark.slow
def test_generation_min_max_time_10_000_tokens():
    """
    Ensure that the min/max tokens generated is correct for max_tokens=10,000 and that the average time is less than 5ms
    """
    run_test(
        max_tokens=10000,
        expected_min=9993,
        expected_max=10000,
        max_duration=0.01,
    )


def run_test(max_tokens, expected_min, expected_max, max_duration, iteration_count=200):

    generate_lorem_text(1, "gpt-3.5-turbo-0613")  # ignore first run

    total_time = 0
    count = 0
    for _ in range(iteration_count):
        start = time.perf_counter()
        text = generate_lorem_text(max_tokens, "gpt-3.5-turbo-0613")
        duration = time.perf_counter() - start

        total_time += duration
        count += 1

        token_count = num_tokens_from_string(text, "gpt-3.5-turbo-0613")

        assert token_count <= expected_max, f"{token_count=} exceeds {expected_max=}"
        assert token_count >= expected_min, f"{token_count=} is less than {expected_min=}"

    avg_duration = total_time / count

    assert avg_duration < max_duration, f"{avg_duration=} exceeded {max_duration=}"
